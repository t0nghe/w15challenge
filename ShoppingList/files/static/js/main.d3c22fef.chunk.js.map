{"version":3,"sources":["index.js"],"names":["App","useState","list","setList","setError","serverUpdated","setServerUpdated","localUpdated","setLocalUpdated","fetchServerUpdated","fetch","then","res","json","result","Date","timestamp","error","fetchList","useEffect","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","console","log","timediff","map","row","name","count","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAIMA,EAAM,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,MAAnC,mBAAcG,GAAd,WAEA,EAA0CH,mBAAS,IAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KAEA,EAAwCL,mBAAS,IAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KA0BA,IAAIC,EAAqB,WACvBC,MAAM,gBAAgBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAC1C,SAACG,GAECR,EAAiB,IAAIS,KAAKD,EAAOE,eAEhC,SAACC,GACFb,EAASa,OAKbC,EAAY,WACdR,MAAM,aAAaC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACjCF,MACA,SAACG,GACCX,EAAQW,MACP,SAACG,GACFb,EAASa,OAkCf,OA1BAE,qBACE,WACED,IACAV,EAAgB,IAAIO,MACpBN,MACC,IAnDL,SAAqBW,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBJ,qBAAU,WACRG,EAAcE,QAAUJ,IACvB,CAACA,IAGJD,qBAAU,WAIR,GAAc,OAAVE,EAAgB,CAClB,IAAII,EAAKC,aAJX,WACEJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IAsCNO,EACA,WACEV,IACAV,EAAiB,IAAIO,MACrBN,IACAoB,QAAQC,IAAI,uBAAwBvB,GACpCsB,QAAQC,IAAI,wBAAyBzB,GAErC,IAAI0B,EAAWxB,EAAeF,EAC9BwB,QAAQC,IAAI,mBAAoBC,GAC5BA,EAAW,IACbb,IACAV,EAAgBH,MAEjB,KAGEH,EAGI,sBAAKuB,GAAG,OAAR,UAAe,+CACtB,gCAAO,gCACNvB,EAAK8B,KACJ,SAAAC,GAAG,OAAI,+BAAI,6BAAKA,EAAIC,OAAU,mCAAMD,EAAIE,sBALnC,qBAAKV,GAAG,OAAR,SAAe,6DAe1BW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtC,EAAD,MAEFuC,SAASC,eAAe,W","file":"static/js/main.d3c22fef.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst App = () => {\n  const [list, setList] = useState([]);\n  const [error, setError] = useState(null);\n  // Time stamp of the latest update time on the server\n  const [serverUpdated, setServerUpdated] = useState(\"\");\n  // Time stamp of the latest update on localhost\n  const [localUpdated, setLocalUpdated] = useState(\"\")\n  // console.log(\"localUpdated, line 13\", localUpdated) // Date string\n  // console.log(\"serverUpdated, line 14\", serverUpdated) // Date object\n\n  // Following function definition copied and pasted from:\n  // https://overreacted.io/making-setinterval-declarative-with-react-hooks/ \n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  let fetchServerUpdated = () => {\n    fetch(\"/api/updated\").then(res => res.json()).then(\n        (result) => {\n          // console.log(\"result.timestamp, line 19\", result.timestamp) // result.timestamp at this point in time seems to be string\n          setServerUpdated(new Date(result.timestamp))\n          // console.log(\"serverUpdated; line 21\", serverUpdated)\n        }, (error) => {\n          setError(error);\n        }\n      )\n  }\n\n  let fetchList = () => {\n    fetch(\"/api/list\").then(res => res.json()\n    ).then(\n      (result) => {\n        setList(result);\n      }, (error) => {\n        setError(error);\n      }\n    )\n  }\n\n  // Initialize the data of sopping list; \n  // localUpdated (timestamp of last update on the client side);\n  // serverUpdate (timestamp of last update on the server side)\n  useEffect(\n    () => {\n      fetchList();\n      setLocalUpdated(new Date());\n      fetchServerUpdated();\n    }, []\n  )\n  \n  // This is fascinating!\n  useInterval(\n  ()=>{\n    fetchList();\n    setLocalUpdated((new Date()));\n    fetchServerUpdated()\n    console.log(\"localUpdated line 77\", localUpdated)\n    console.log(\"serverUpdated line 78\", serverUpdated)\n\n    let timediff = localUpdated - serverUpdated;\n    console.log(\"timediff line 61\", timediff)\n    if (timediff < 0) {\n      fetchList();\n      setLocalUpdated(serverUpdated);\n    }\n  }, 500\n      )\n\n  if (!list) {\n    return <div id=\"main\"><h1>There is nothing to buy.</h1></div>\n  } else {\n    return <div id=\"main\"><h1>Shopping List</h1>\n    <table><tbody>\n    {list.map(\n      row => <tr><td>{row.name}</td><td> {row.count}</td></tr>\n    )}</tbody></table>\n    {/* <div>serverUpdated: {serverUpdated}</div>\n    <div>localUpdated: {localUpdated}</div>\n    <div>local - server:<br />This has to be positive:<br />{new Date(localUpdated)-new Date(serverUpdated)}</div> */}\n    </div>\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}